import asyncio
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ContentType


BOT_TOKEN = "8470870259:AAFi1WHDudG1Za7X4-BUMblkEugu_-mZdx0"


DB_PATH = "streaks.db"
STREAK_TIMEOUT = timedelta(hours=24)
MIN_STREAK_TO_ANNOUNCE = 3

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS streaks (
                chat_id INTEGER PRIMARY KEY,
                streak_count INTEGER DEFAULT 1,
                last_activity TIMESTAMP,
                last_user_id INTEGER,
                last_username TEXT
            )
        """)
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS streak_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                chat_title TEXT,
                streak_count INTEGER,
                start_date TIMESTAMP,
                end_date TIMESTAMP,
                reason TEXT
            )
        """)
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_activity (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                user_id INTEGER,
                username TEXT,
                activity_count INTEGER DEFAULT 1,
                last_activity TIMESTAMP
            )
        """)
        
        await db.commit()


def get_streak_emoji(streak_count: int) -> str:
    if streak_count >= 30:
        return "üî•üíé"
    elif streak_count >= 20:
        return "üî•üèÜ"
    elif streak_count >= 10:
        return "üî•‚≠ê"
    elif streak_count >= 5:
        return "üî•"
    else:
        return "‚ú®"


async def get_current_streak(chat_id: int) -> dict:
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute(
            "SELECT * FROM streaks WHERE chat_id = ?",
            (chat_id,)
        )
        row = await cursor.fetchone()
        if row:
            return dict(row)
        return None


async def save_streak_to_history(chat_id: int, chat_title: str, streak_count: int, 
                                 start_date: datetime, reason: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO streak_history (chat_id, chat_title, streak_count, start_date, end_date, reason)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (chat_id, chat_title, streak_count, start_date, datetime.now(), reason))
        await db.commit()


async def update_user_activity(chat_id: int, user_id: int, username: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT activity_count FROM user_activity WHERE chat_id = ? AND user_id = ?",
            (chat_id, user_id)
        )
        row = await cursor.fetchone()
        
        if row:
            await db.execute("""
                UPDATE user_activity 
                SET activity_count = activity_count + 1, 
                    last_activity = ?,
                    username = ?
                WHERE chat_id = ? AND user_id = ?
            """, (datetime.now(), username, chat_id, user_id))
        else:
            await db.execute("""
                INSERT INTO user_activity (chat_id, user_id, username, activity_count, last_activity)
                VALUES (?, ?, ?, 1, ?)
            """, (chat_id, user_id, username, datetime.now()))
        
        await db.commit()


async def check_and_update_streak(message: Message) -> dict:
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    current_time = datetime.now()
    
    streak_data = await get_current_streak(chat_id)
    
    async with aiosqlite.connect(DB_PATH) as db:
        if not streak_data:
            await db.execute("""
                INSERT INTO streaks (chat_id, streak_count, last_activity, last_user_id, last_username)
                VALUES (?, 1, ?, ?, ?)
            """, (chat_id, current_time, user_id, username))
            await db.commit()
            return {'is_new_streak': True, 'count': 1, 'broken': False}
        
        last_activity = datetime.fromisoformat(streak_data['last_activity'])
        time_diff = current_time - last_activity
        
        if time_diff > STREAK_TIMEOUT:
            old_streak = streak_data['streak_count']
            
            await save_streak_to_history(
                chat_id, 
                message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                old_streak,
                last_activity,
                "timeout"
            )
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫
            await db.execute("""
                UPDATE streaks 
                SET streak_count = 1, 
                    last_activity = ?,
                    last_user_id = ?,
                    last_username = ?
                WHERE chat_id = ?
            """, (current_time, user_id, username, chat_id))
            await db.commit()
            
            return {'is_new_streak': True, 'count': 1, 'broken': True, 'old_streak': old_streak}
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∏–∫
        new_count = streak_data['streak_count'] + 1
        await db.execute("""
            UPDATE streaks 
            SET streak_count = ?,
                last_activity = ?,
                last_user_id = ?,
                last_username = ?
            WHERE chat_id = ?
        """, (new_count, current_time, user_id, username, chat_id))
        await db.commit()
        
        return {'is_new_streak': False, 'count': new_count, 'broken': False}


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ.\n\n"
        "üìä –Ø —Å—á–∏—Ç–∞—é –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        f"‚è∞ –°—Ç—Ä–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç –±–æ–ª–µ–µ {STREAK_TIMEOUT.total_seconds() / 3600:.0f} —á–∞—Å–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/streak - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è —Å—Ç—Ä–∏–∫–æ–≤\n"
        "/top - —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/reset - —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )


@dp.message(Command("streak"))
async def cmd_streak(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ —á–∞—Ç–∞"""
    chat_id = message.chat.id
    streak_data = await get_current_streak(chat_id)
    
    if not streak_data:
        await message.answer("üìä –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
        return
    
    streak_count = streak_data['streak_count']
    last_activity = datetime.fromisoformat(streak_data['last_activity'])
    time_since = datetime.now() - last_activity
    
    emoji = get_streak_emoji(streak_count)
    
    hours_remaining = STREAK_TIMEOUT.total_seconds() - time_since.total_seconds()
    hours_remaining = max(0, hours_remaining / 3600)
    
    minutes_ago = time_since.seconds // 60
    
    await message.answer(
        f"{emoji} <b>–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak_count}</b>\n"
        f"üë§ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {streak_data['last_username']}\n"
        f"üïê –í—Ä–µ–º—è: {minutes_ago} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥\n"
        f"‚è≥ –î–æ —Å–±—Ä–æ—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {hours_remaining:.1f} —á–∞—Å–æ–≤",
        parse_mode="HTML"
    )


@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞"""
    chat_id = message.chat.id
    
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫
        streak_data = await get_current_streak(chat_id)
        
        # –õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫
        cursor = await db.execute("""
            SELECT MAX(streak_count) as best_streak 
            FROM streak_history 
            WHERE chat_id = ?
        """, (chat_id,))
        best_row = await cursor.fetchone()
        best_streak = best_row['best_streak'] if best_row['best_streak'] else 0
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        cursor = await db.execute("""
            SELECT SUM(activity_count) as total_activities
            FROM user_activity
            WHERE chat_id = ?
        """, (chat_id,))
        activity_row = await cursor.fetchone()
        total_activities = activity_row['total_activities'] if activity_row['total_activities'] else 0
        
        if not streak_data and best_streak == 0:
            await message.answer("üìä –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
            return
        
        current_streak = streak_data['streak_count'] if streak_data else 0
        if current_streak > best_streak:
            best_streak = current_streak
        
        await message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</b>\n\n"
            f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {current_streak}\n"
            f"üèÜ –õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫: {best_streak}\n"
            f"üìà –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {total_activities}",
            parse_mode="HTML"
        )


@dp.message(Command("history"))
async def cmd_history(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç—Ä–∏–∫–æ–≤"""
    chat_id = message.chat.id
    
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("""
            SELECT streak_count, start_date, end_date, reason
            FROM streak_history
            WHERE chat_id = ?
            ORDER BY end_date DESC
            LIMIT 10
        """, (chat_id,))
        rows = await cursor.fetchall()
        
        if not rows:
            await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç—Ä–∏–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞!")
            return
        
        history_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç—Ä–∏–∫–æ–≤</b>\n\n"
        for i, row in enumerate(rows, 1):
            end_date = datetime.fromisoformat(row['end_date'])
            history_text += (
                f"{i}. üî• <b>{row['streak_count']}</b> "
                f"({end_date.strftime('%d.%m.%Y')})\n"
            )
        
        await message.answer(history_text, parse_mode="HTML")


@dp.message(Command("top"))
async def cmd_top(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    chat_id = message.chat.id
    
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("""
            SELECT username, activity_count
            FROM user_activity
            WHERE chat_id = ?
            ORDER BY activity_count DESC
            LIMIT 10
        """, (chat_id,))
        rows = await cursor.fetchall()
        
        if not rows:
            await message.answer("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞!")
            return
        
        top_text = "üë• <b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, row in enumerate(rows):
            medal = medals[i] if i < 3 else f"{i+1}."
            top_text += f"{medal} {row['username']}: <b>{row['activity_count']}</b>\n"
        
        await message.answer(top_text, parse_mode="HTML")


@dp.message(Command("reset"))
async def cmd_reset(message: Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        if member.status not in ["administrator", "creator"]:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—Ç—Ä–∏–∫–∏!")
            return
    except:
        pass
    
    streak_data = await get_current_streak(chat_id)
    if not streak_data:
        await message.answer("üìä –ù–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    await save_streak_to_history(
        chat_id,
        message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        streak_data['streak_count'],
        datetime.fromisoformat(streak_data['last_activity']),
        "manual_reset"
    )
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM streaks WHERE chat_id = ?", (chat_id,))
        await db.commit()
    
    await message.answer(f"üîÑ –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω! –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak_data['streak_count']}")


@dp.message(F.content_type.in_({
    ContentType.TEXT,
    ContentType.PHOTO,
    ContentType.VIDEO,
    ContentType.DOCUMENT,
    ContentType.AUDIO,
    ContentType.VOICE,
    ContentType.VIDEO_NOTE,
    ContentType.STICKER,
    ContentType.ANIMATION
}))
async def track_activity(message: Message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        return
    
    result = await check_and_update_streak(message)
    
    username = message.from_user.username or message.from_user.first_name
    await update_user_activity(message.chat.id, message.from_user.id, username)
    
    if result['broken'] and result['old_streak'] >= MIN_STREAK_TO_ANNOUNCE:
        await message.answer(
            f"üíî –°—Ç—Ä–∏–∫ –ø—Ä–µ—Ä–≤–∞–Ω! –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç—Ä–∏–∫: {result['old_streak']}\n"
            f"üÜï –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫!"
        )
    
    # –û–±—ä—è–≤–ª—è–µ–º –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—Ö–∞—Ö
    count = result['count']
    if count in [5, 10, 25, 50, 100, 200, 500, 1000]:
        emoji = get_streak_emoji(count)
        await message.answer(
            f"{emoji} <b>–í–∞—É! –°—Ç—Ä–∏–∫ –¥–æ—Å—Ç–∏–≥ {count}!</b>\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
            parse_mode="HTML"
        )


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await init_db()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())